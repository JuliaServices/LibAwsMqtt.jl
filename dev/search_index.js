var documenterSearchIndex = {"docs":
[{"location":"#LibAwsMqtt","page":"Home","title":"LibAwsMqtt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LibAwsMqtt.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#LibAwsMqtt.AWS_C_MQTT_PACKAGE_ID","page":"Home","title":"LibAwsMqtt.AWS_C_MQTT_PACKAGE_ID","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_SUBSCRIPTIONS_PER_SUBSCRIBE","page":"Home","title":"LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_SUBSCRIPTIONS_PER_SUBSCRIBE","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_TOPIC_FILTERS_PER_UNSUBSCRIBE","page":"Home","title":"LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_TOPIC_FILTERS_PER_UNSUBSCRIBE","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_USER_PROPERTIES","page":"Home","title":"LibAwsMqtt.AWS_MQTT5_CLIENT_MAXIMUM_USER_PROPERTIES","text":"Documentation not found.\n\n\n\n\n\n","category":"constant"},{"location":"#LibAwsMqtt.aws_mqtt5_callback_set","page":"Home","title":"LibAwsMqtt.aws_mqtt5_callback_set","text":"aws_mqtt5_callback_set\n\nA record that tracks MQTT5 client callbacks which can be dynamically injected via a listener.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_connection_event_callback_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_connection_event_callback_fn","text":"Callback signature for mqtt5 client lifecycle events.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_inbound_topic_alias_behavior_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_inbound_topic_alias_behavior_type","text":"aws_mqtt5_client_inbound_topic_alias_behavior_type\n\nInbound topic aliasing behavior is controlled by this type.\n\nTopic alias behavior is described in https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901113\n\nThis setting controls whether or not the client will send a positive topic alias maximum to the server in its CONNECT packets.\n\nIf topic aliasing is not supported by the server, this setting has no net effect.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_lifecycle_event","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_lifecycle_event","text":"aws_mqtt5_client_lifecycle_event\n\nDetails about a client lifecycle event.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_lifecycle_event_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_lifecycle_event_type","text":"aws_mqtt5_client_lifecycle_event_type\n\nType of a client lifecycle event\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_operation_queue_behavior_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_operation_queue_behavior_type","text":"aws_mqtt5_client_operation_queue_behavior_type\n\nControls how disconnects affect the queued and in-progress operations submitted to the client. Also controls how operations are handled while the client is not connected. In particular, if the client is not connected, then any operation that would be failed on disconnect (according to these rules) will be rejected.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_operation_statistics","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_operation_statistics","text":"aws_mqtt5_client_operation_statistics\n\nContains some simple statistics about the current state of the client's queue of operations\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_options","text":"aws_mqtt5_client_options\n\nBasic mqtt5 client configuration struct.\n\nContains desired connection properties Configuration that represents properties of the mqtt5 CONNECT packet go in the connect view (connect_options)\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_outbound_topic_alias_behavior_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_outbound_topic_alias_behavior_type","text":"aws_mqtt5_client_outbound_topic_alias_behavior_type\n\nOutbound topic aliasing behavior is controlled by this type.\n\nTopic alias behavior is described in https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901113\n\nIf the server allows topic aliasing, this setting controls how topic aliases are used on PUBLISH packets sent from the client to the server.\n\nIf topic aliasing is not supported by the server, this setting has no effect and any attempts to directly manipulate the topic alias id in outbound publishes will be ignored.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_session_behavior_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_session_behavior_type","text":"aws_mqtt5_client_session_behavior_type\n\nControls how the mqtt client should behave with respect to mqtt sessions.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_termination_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_termination_completion_fn","text":"Signature of callback invoked when a client has completely destroyed itself\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_topic_alias_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_topic_alias_options","text":"aws_mqtt5_client_topic_alias_options\n\nConfiguration struct for all client topic aliasing behavior. If this is left null, then all default options (as it zeroed) will be used.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_connect_reason_code","page":"Home","title":"LibAwsMqtt.aws_mqtt5_connect_reason_code","text":"aws_mqtt5_connect_reason_code\n\nServer return code for CONNECT attempts. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901079\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_disconnect_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_disconnect_completion_fn","text":"Signature of callback to invoke when a DISCONNECT is fully written to the socket (or fails to be)\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_disconnect_completion_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_disconnect_completion_options","text":"aws_mqtt5_disconnect_completion_options\n\nCompletion options for the a DISCONNECT operation\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_disconnect_reason_code","page":"Home","title":"LibAwsMqtt.aws_mqtt5_disconnect_reason_code","text":"aws_mqtt5_disconnect_reason_code\n\nReason code inside DISCONNECT packets. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901208\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_extended_validation_and_flow_control_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_extended_validation_and_flow_control_options","text":"aws_mqtt5_extended_validation_and_flow_control_options\n\nExtended validation and flow control options\n\nPotentially a point of expansion in the future. We could add custom controls letting people override the Aws IOT Core limits based on their account properties. We could, with IoT Core support, add dynamic limit recognition via user properties as well.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_listener","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_config","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_config","text":"aws_mqtt5_listener_config\n\nConfiguration options for MQTT5 listener objects.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_publish_received_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_publish_received_fn","text":"Signature of a listener publish received callback that returns an indicator whether or not the publish was handled by the listener.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_termination_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_termination_completion_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_negotiated_settings","page":"Home","title":"LibAwsMqtt.aws_mqtt5_negotiated_settings","text":"aws_mqtt5_negotiated_settings\n\nMqtt behavior settings that are dynamically negotiated as part of the CONNECT/CONNACK exchange.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connack_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connack_storage","text":"aws_mqtt5_packet_connack_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connack_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connack_view","text":"aws_mqtt5_packet_connack_view\n\nRead-only snapshot of a CONNACK packet.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901074\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connect_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connect_storage","text":"aws_mqtt5_packet_connect_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connect_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connect_view","text":"aws_mqtt5_packet_connect_view\n\nRead-only snapshot of a CONNECT packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901033\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_disconnect_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_disconnect_storage","text":"aws_mqtt5_packet_disconnect_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_disconnect_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_disconnect_view","text":"aws_mqtt5_packet_disconnect_view\n\nRead-only snapshot of a DISCONNECT packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901205\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_id_t","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_id_t","text":"Over-the-wire packet id as defined in the mqtt spec. Allocated at the point in time when the packet is is next to go down the channel and about to be encoded into an io message buffer.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901026\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_puback_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_puback_storage","text":"aws_mqtt5_packet_puback_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_puback_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_puback_view","text":"aws_mqtt5_packet_puback_view\n\nRead-only snapshot of a PUBACK packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901121\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_publish_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_publish_storage","text":"aws_mqtt5_packet_publish_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_publish_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_publish_view","text":"aws_mqtt5_packet_publish_view\n\nRead-only snapshot of a PUBLISH packet. Used both in configuration of a publish operation and callback data in message receipt.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901100\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_suback_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_suback_storage","text":"aws_mqtt5_packet_suback_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_suback_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_suback_view","text":"aws_mqtt5_packet_suback_view\n\nRead-only snapshot of a SUBACK packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901171\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_subscribe_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_subscribe_storage","text":"aws_mqtt5_packet_subscribe_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_subscribe_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_subscribe_view","text":"aws_mqtt5_packet_subscribe_view\n\nRead-only snapshot of a SUBSCRIBE packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901161\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_type","text":"aws_mqtt5_packet_type\n\nType of mqtt packet. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901022\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsuback_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsuback_storage","text":"aws_mqtt5_packet_unsuback_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsuback_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsuback_view","text":"aws_mqtt5_packet_unsuback_view\n\nRead-only snapshot of an UNSUBACK packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901187\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage","text":"aws_mqtt5_packet_unsubscribe_storage\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsubscribe_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsubscribe_view","text":"aws_mqtt5_packet_unsubscribe_view\n\nRead-only snapshot of an UNSUBSCRIBE packet\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901179\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_payload_format_indicator","page":"Home","title":"LibAwsMqtt.aws_mqtt5_payload_format_indicator","text":"aws_mqtt5_payload_format_indicator\n\nOptional property describing a message's payload format. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901063\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_puback_reason_code","page":"Home","title":"LibAwsMqtt.aws_mqtt5_puback_reason_code","text":"aws_mqtt5_puback_reason_code\n\nReason code inside PUBACK packets. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901124\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_publish_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_publish_completion_fn","text":"Signature of callback to invoke on Publish success/failure.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_publish_completion_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_publish_completion_options","text":"aws_mqtt5_publish_completion_options\n\nCompletion options for the Publish operation\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_publish_received_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_publish_received_fn","text":"Signature of callback to invoke on Publish received\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_qos","page":"Home","title":"LibAwsMqtt.aws_mqtt5_qos","text":"aws_mqtt5_qos\n\nMQTT Message delivery quality of service. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901234\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_retain_handling_type","page":"Home","title":"LibAwsMqtt.aws_mqtt5_retain_handling_type","text":"aws_mqtt5_retain_handling_type\n\nConfigures how retained messages should be handled when subscribing with a topic filter that matches topics with associated retained messages.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901169\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_suback_reason_code","page":"Home","title":"LibAwsMqtt.aws_mqtt5_suback_reason_code","text":"aws_mqtt5_suback_reason_code\n\nReason code inside SUBACK packet payloads. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901178\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_subscribe_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_subscribe_completion_fn","text":"Signature of callback to invoke on Subscribe success/failure.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_subscribe_completion_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_subscribe_completion_options","text":"aws_mqtt5_subscribe_completion_options\n\nCompletion options for the Subscribe operation\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_subscription_view","page":"Home","title":"LibAwsMqtt.aws_mqtt5_subscription_view","text":"aws_mqtt5_subscription_view\n\nConfigures a single subscription within a Subscribe operation\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_transform_websocket_handshake_complete_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_transform_websocket_handshake_complete_fn","text":"Signature of the continuation function to be called after user-code transforms a websocket handshake request\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_transform_websocket_handshake_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_transform_websocket_handshake_fn","text":"Signature of the websocket handshake request transformation function. After transformation, the completion function must be invoked to send the request.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_unsuback_reason_code","page":"Home","title":"LibAwsMqtt.aws_mqtt5_unsuback_reason_code","text":"aws_mqtt5_unsuback_reason_code\n\nReason code inside UNSUBACK packet payloads. Enum values match mqtt spec encoding values.\n\nhttps://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901194\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_unsubscribe_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt5_unsubscribe_completion_fn","text":"Signature of callback to invoke on Unsubscribe success/failure.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_unsubscribe_completion_options","page":"Home","title":"LibAwsMqtt.aws_mqtt5_unsubscribe_completion_options","text":"aws_mqtt5_unsubscribe_completion_options\n\nCompletion options for the Unsubscribe operation\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_user_property","page":"Home","title":"LibAwsMqtt.aws_mqtt5_user_property","text":"aws_mqtt5_user_property\n\nNon-persistent representation of an mqtt5 user property.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_user_property_set","page":"Home","title":"LibAwsMqtt.aws_mqtt5_user_property_set","text":"aws_mqtt5_user_property_set\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client","page":"Home","title":"LibAwsMqtt.aws_mqtt_client","text":"aws_mqtt_client\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_311_impl","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_311_impl","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_closed_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_closed_fn","text":"Called if the connection to the server is closed by user request Note: Currently the \"data\" argument is always NULL, but this may change in the future if additional data is needed to be sent.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_complete_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_complete_fn","text":"Called when a connection attempt is completed, either in success or error.\n\nIf error code is AWS_ERROR_SUCCESS, then a CONNACK has been received from the server and return_code and session_present contain the values received. If error_code is not AWS_ERROR_SUCCESS, it refers to the internal error that occurred during connection, and return_code and session_present are invalid.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_failure_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_failure_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_interrupted_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_interrupted_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_resumed_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_resumed_fn","text":"Called when a connection to the server is resumed (if clean_session is true, calling aws_mqtt_resubscribe_existing_topics is suggested)\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_success_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_success_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_connection_termination_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_connection_termination_fn","text":"Signature of callback invoked on a connection destruction.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_on_disconnect_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_on_disconnect_fn","text":"Called when a connection is closed, right before any resources are deleted\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_client_publish_received_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_publish_received_fn","text":"Called when a publish message is received.\n\nArguments\n\nconnection:[in] The connection object\ntopic:[in] The information channel to which the payload data was published.\npayload:[in] The payload data.\ndup:[in] DUP flag. If true, this might be re-delivery of an earlier attempt to send the message.\nqos:[in] Quality of Service used to deliver the message.\nretain:[in] Retain flag. If true, the message was sent as a result of a new subscription being made by the client.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_connect_return_code","page":"Home","title":"LibAwsMqtt.aws_mqtt_connect_return_code","text":"aws_mqtt_connect_return_code\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_connection_operation_statistics","page":"Home","title":"LibAwsMqtt.aws_mqtt_connection_operation_statistics","text":"aws_mqtt_connection_operation_statistics\n\nContains some simple statistics about the current state of the connection's queue of operations\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_connection_options","page":"Home","title":"LibAwsMqtt.aws_mqtt_connection_options","text":"aws_mqtt_connection_options\n\nhost_name The server name to connect to. This resource may be freed immediately on return. port The port on the server to connect to client_id The clientid to place in the CONNECT packet. socket_options The socket options to pass to the aws_client_bootstrap functions. This is copied into the connection tls_options TLS settings to use when opening a connection. This is copied into the connection Pass NULL to connect without TLS (NOT RECOMMENDED) clean_session True to discard all server session data and start fresh keep_alive_time_secs The keep alive value to place in the CONNECT PACKET, a PING will automatically be sent at this interval as well. If you specify 0, defaults will be used and a ping will be sent once per 20 minutes. This duration must be longer than ping_timeout_ms. ping_timeout_ms Network connection is re-established if a ping response is not received within this amount of time (milliseconds). If you specify 0, a default value of 3 seconds is used. Alternatively, tcp keep-alive may be away to accomplish this in a more efficient (low-power) scenario, but keep-alive options may not work the same way on every platform and OS version. This duration must be shorter than keep_alive_time_secs. protocol_operation_timeout_ms Timeout when waiting for the response to some operation requires response by protocol. Set to zero to disable timeout. Otherwise, the operation will fail with error AWS_ERROR_MQTT_TIMEOUT if no response is received within this amount of time after the packet is written to the socket. The timer is reset if the connection is interrupted. It applied to PUBLISH (QoS>0) and UNSUBSCRIBE now. Note: While the MQTT 3 specification states that a broker MUST respond, some brokers are known to ignore publish packets in exceptional circumstances (e.g. AWS IoT Core will not respond if the publish quota is exceeded). on_connection_complete The callback to fire when the connection attempt completes user_data Passed to the userdata param of on_connection_complete\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_error","page":"Home","title":"LibAwsMqtt.aws_mqtt_error","text":"aws_mqtt_error\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_log_subject","page":"Home","title":"LibAwsMqtt.aws_mqtt_log_subject","text":"aws_mqtt_log_subject\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_op_complete_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_op_complete_fn","text":"Callback called when a request roundtrip is complete (QoS0 immediately, QoS1 on PUBACK, QoS2 on PUBCOMP). Either succeed or not\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_qos","page":"Home","title":"LibAwsMqtt.aws_mqtt_qos","text":"aws_mqtt_qos\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_operation_completion_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_operation_completion_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_operation_options","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_operation_options","text":"aws_mqtt_request_operation_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_operation_response_path","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_operation_response_path","text":"aws_mqtt_request_operation_response_path\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_initialized_callback_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_initialized_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_options","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_options","text":"aws_mqtt_request_response_client_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_terminated_callback_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_terminated_callback_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_rr_client_operation","page":"Home","title":"LibAwsMqtt.aws_mqtt_rr_client_operation","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_rr_incoming_publish_event","page":"Home","title":"LibAwsMqtt.aws_mqtt_rr_incoming_publish_event","text":"aws_mqtt_rr_incoming_publish_event\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_streaming_operation_incoming_publish_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_streaming_operation_incoming_publish_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_streaming_operation_options","page":"Home","title":"LibAwsMqtt.aws_mqtt_streaming_operation_options","text":"aws_mqtt_streaming_operation_options\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_streaming_operation_subscription_status_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_streaming_operation_subscription_status_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_streaming_operation_terminated_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_streaming_operation_terminated_fn","text":"Documentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_suback_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_suback_fn","text":"Called when a single-topic subscription request is complete. Note: If the qos value is AWS_MQTT_QOS_FAILURE, then the subscription was rejected by the broker.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_suback_multi_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_suback_multi_fn","text":"Called when a multi-topic subscription request is complete. Note: If any topic_suback's qos value is AWS_MQTT_QOS_FAILURE, then that topic subscription was rejected by the broker.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_topic_subscription","page":"Home","title":"LibAwsMqtt.aws_mqtt_topic_subscription","text":"aws_mqtt_topic_subscription\n\nPassed to subscribe() and suback callbacks\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_transform_websocket_handshake_complete_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_transform_websocket_handshake_complete_fn","text":"Function to invoke when the websocket handshake request transformation completes. This function MUST be invoked or the application will soft-lock.\n\nrequest and complete_ctx must be the same pointers provided to the aws_mqtt_transform_websocket_handshake_fn. error_code should should be AWS_ERROR_SUCCESS if transformation was successful, otherwise pass a different AWS_ERROR_X value.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_transform_websocket_handshake_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_transform_websocket_handshake_fn","text":"Function that may transform the websocket handshake request. Called each time a websocket connection is attempted.\n\nThe default request uses path \"/mqtt\". All required headers are present, plus the optional header \"Sec-WebSocket-Protocol: mqtt\".\n\nThe user MUST invoke the complete_fn when transformation is complete or the application will soft-lock. When invoking the complete_fn, pass along the request and complete_ctx provided here and an error code. The error code should be AWS_ERROR_SUCCESS if transformation was successful, otherwise pass a different AWS_ERROR_X value.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_userdata_cleanup_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_userdata_cleanup_fn","text":"Function called on cleanup of a userdata.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt_validate_websocket_handshake_fn","page":"Home","title":"LibAwsMqtt.aws_mqtt_validate_websocket_handshake_fn","text":"Function that may accept or reject a websocket handshake response. Called each time a valid websocket connection is established.\n\nAll required headers have been checked already (ex: \"Sec-Websocket-Accept\"),\n\nReturn AWS_OP_SUCCESS to accept the connection or AWS_OP_ERR to stop the connection attempt.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_rr_streaming_subscription_event_type","page":"Home","title":"LibAwsMqtt.aws_rr_streaming_subscription_event_type","text":"aws_rr_streaming_subscription_event_type\n\nDocumentation not found.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.on_connection_closed_data","page":"Home","title":"LibAwsMqtt.on_connection_closed_data","text":"Empty struct that is passed when on_connection_closed is called. Currently holds nothing but will allow expanding in the future should it be needed.\n\n\n\n\n\n","category":"type"},{"location":"#LibAwsMqtt.aws_mqtt5_client_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_acquire","text":"aws_mqtt5_client_acquire(client)\n\nAcquires a reference to an mqtt5 client\n\nArguments\n\nclient: client to acquire a reference to. May be NULL.\n\nReturns\n\nwhat was passed in as the client (a client or NULL)\n\nPrototype\n\nstruct aws_mqtt5_client *aws_mqtt5_client_acquire(struct aws_mqtt5_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_get_stats-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_get_stats","text":"aws_mqtt5_client_get_stats(client, stats)\n\nQueries the client's internal statistics for incomplete operations.\n\nArguments\n\nclient: client to get statistics for\nstats: set of incomplete operation statistics\n\nPrototype\n\nvoid aws_mqtt5_client_get_stats(struct aws_mqtt5_client *client, struct aws_mqtt5_client_operation_statistics *stats);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_new-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_new","text":"aws_mqtt5_client_new(allocator, options)\n\nCreates a new mqtt5 client using the supplied configuration\n\nArguments\n\nallocator: allocator to use with all memory operations related to this client's creation and operation\noptions: mqtt5 client configuration\n\nReturns\n\na new mqtt5 client or NULL\n\nPrototype\n\nstruct aws_mqtt5_client *aws_mqtt5_client_new( struct aws_allocator *allocator, const struct aws_mqtt5_client_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_publish-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_publish","text":"aws_mqtt5_client_publish(client, publish_options, completion_options)\n\nQueues a Publish operation in an mqtt5 client\n\nArguments\n\nclient: mqtt5 client to queue a Publish for\npublish_options: configuration options for the Publish operation\ncompletion_options: completion callback configuration. Successful QoS 0 publishes invoke the callback when the data has been written to the socket. Successful QoS1+ publishes invoke the callback when the corresponding ack is received. Unsuccessful publishes invoke the callback at the point in time a failure condition is reached.\n\nReturns\n\nsuccess/failure in the synchronous logic that kicks off the publish operation\n\nPrototype\n\nint aws_mqtt5_client_publish( struct aws_mqtt5_client *client, const struct aws_mqtt5_packet_publish_view *publish_options, const struct aws_mqtt5_publish_completion_options *completion_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_release","text":"aws_mqtt5_client_release(client)\n\nRelease a reference to an mqtt5 client. When the client ref count drops to zero, the client will automatically trigger a stop and once the stop completes, the client will delete itself.\n\nArguments\n\nclient: client to release a reference to. May be NULL.\n\nReturns\n\nNULL\n\nPrototype\n\nstruct aws_mqtt5_client *aws_mqtt5_client_release(struct aws_mqtt5_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_start-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_start","text":"aws_mqtt5_client_start(client)\n\nAsynchronous notify to the mqtt5 client that you want it to attempt to connect to the configured endpoint. The client will attempt to stay connected using the properties of the reconnect-related parameters in the mqtt5 client configuration.\n\nArguments\n\nclient: mqtt5 client to start\n\nReturns\n\nsuccess/failure in the synchronous logic that kicks off the start process\n\nPrototype\n\nint aws_mqtt5_client_start(struct aws_mqtt5_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_stop-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_stop","text":"aws_mqtt5_client_stop(client, disconnect_options, completion_options)\n\nAsynchronous notify to the mqtt5 client that you want it to transition to the stopped state. When the client reaches the stopped state, all session state is erased.\n\nArguments\n\nclient: mqtt5 client to stop\ndisconnect_options: (optional) properties of a DISCONNECT packet to send as part of the shutdown process\n\nReturns\n\nsuccess/failure in the synchronous logic that kicks off the stop process\n\nPrototype\n\nint aws_mqtt5_client_stop( struct aws_mqtt5_client *client, const struct aws_mqtt5_packet_disconnect_view *disconnect_options, const struct aws_mqtt5_disconnect_completion_options *completion_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_subscribe-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_subscribe","text":"aws_mqtt5_client_subscribe(client, subscribe_options, completion_options)\n\nQueues a Subscribe operation in an mqtt5 client\n\nArguments\n\nclient: mqtt5 client to queue a Subscribe for\nsubscribe_options: configuration options for the Subscribe operation\ncompletion_options: Completion callback configuration. Invoked when the corresponding SUBACK is received or a failure condition is reached. An error code implies complete failure of the subscribe, while a success code implies the user must still check all of the SUBACK's reason codes for per-subscription feedback.\n\nReturns\n\nsuccess/failure in the synchronous logic that kicks off the Subscribe operation\n\nPrototype\n\nint aws_mqtt5_client_subscribe( struct aws_mqtt5_client *client, const struct aws_mqtt5_packet_subscribe_view *subscribe_options, const struct aws_mqtt5_subscribe_completion_options *completion_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_client_unsubscribe-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_client_unsubscribe","text":"aws_mqtt5_client_unsubscribe(client, unsubscribe_options, completion_options)\n\nQueues an Unsubscribe operation in an mqtt5 client\n\nArguments\n\nclient: mqtt5 client to queue an Unsubscribe for\nunsubscribe_options: configuration options for the Unsubscribe operation\ncompletion_options: Completion callback configuration. Invoked when the corresponding UNSUBACK is received or a failure condition is reached. An error code implies complete failure of the unsubscribe, while a success code implies the user must still check all of the UNSUBACK's reason codes for per-topic-filter feedback.\n\nReturns\n\nsuccess/failure in the synchronous logic that kicks off the Unsubscribe operation\n\nPrototype\n\nint aws_mqtt5_client_unsubscribe( struct aws_mqtt5_client *client, const struct aws_mqtt5_packet_unsubscribe_view *unsubscribe_options, const struct aws_mqtt5_unsubscribe_completion_options *completion_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_acquire","text":"aws_mqtt5_listener_acquire(listener)\n\nAdds a reference to an mqtt5 listener.\n\nArguments\n\nlistener: listener to add a reference to\n\nReturns\n\nthe listener object\n\nPrototype\n\nstruct aws_mqtt5_listener *aws_mqtt5_listener_acquire(struct aws_mqtt5_listener *listener);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_new-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_new","text":"aws_mqtt5_listener_new(allocator, config)\n\nCreates a new MQTT5 listener object. For as long as the listener lives, incoming publishes and lifecycle events will be forwarded to the callbacks configured on the listener.\n\nArguments\n\nallocator: allocator to use\nconfig: listener configuration\n\nReturns\n\na new aws_mqtt5_listener object\n\nPrototype\n\nstruct aws_mqtt5_listener *aws_mqtt5_listener_new( struct aws_allocator *allocator, struct aws_mqtt5_listener_config *config);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_listener_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_listener_release","text":"aws_mqtt5_listener_release(listener)\n\nRemoves a reference to an mqtt5 listener. When the reference count drops to zero, the listener's asynchronous destruction will be started.\n\nArguments\n\nlistener: listener to remove a reference from\n\nReturns\n\nNULL\n\nPrototype\n\nstruct aws_mqtt5_listener *aws_mqtt5_listener_release(struct aws_mqtt5_listener *listener);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_negotiated_settings_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_negotiated_settings_clean_up","text":"aws_mqtt5_negotiated_settings_clean_up(negotiated_settings)\n\nClean up owned memory in negotiated_settings\n\nArguments\n\nnegotiated_settings: settings to clean up\n\nPrototype\n\nvoid aws_mqtt5_negotiated_settings_clean_up(struct aws_mqtt5_negotiated_settings *negotiated_settings);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_negotiated_settings_copy-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_negotiated_settings_copy","text":"aws_mqtt5_negotiated_settings_copy(source, dest)\n\nMakes an owning copy of a negotiated settings structure.\n\nUsed in downstream.\n\nArguments\n\nsource: settings to copy from\ndest: settings to copy into. Must be in a zeroed or initialized state because it gets clean up called on it as the first step of the copy process.\n\nReturns\n\nsuccess/failure\n\nPrototype\n\nint aws_mqtt5_negotiated_settings_copy( const struct aws_mqtt5_negotiated_settings *source, struct aws_mqtt5_negotiated_settings *dest);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_negotiated_settings_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_negotiated_settings_init","text":"aws_mqtt5_negotiated_settings_init(allocator, negotiated_settings, client_id)\n\nInitializes the Client ID byte buf in negotiated settings\n\nArguments\n\nallocator: allocator to use for memory allocation\nnegotiated_settings: settings to apply client id to\nclient_id: client id to set\n\nPrototype\n\nint aws_mqtt5_negotiated_settings_init( struct aws_allocator *allocator, struct aws_mqtt5_negotiated_settings *negotiated_settings, const struct aws_byte_cursor *client_id);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connack_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connack_storage_clean_up","text":"aws_mqtt5_packet_connack_storage_clean_up(connack_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_connack_storage_clean_up(struct aws_mqtt5_packet_connack_storage *connack_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connack_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connack_storage_init","text":"aws_mqtt5_packet_connack_storage_init(connack_storage, allocator, connack_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_connack_storage_init( struct aws_mqtt5_packet_connack_storage *connack_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_connack_view *connack_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connack_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connack_storage_init_from_external_storage","text":"aws_mqtt5_packet_connack_storage_init_from_external_storage(connack_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_connack_storage_init_from_external_storage( struct aws_mqtt5_packet_connack_storage *connack_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connect_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connect_storage_clean_up","text":"aws_mqtt5_packet_connect_storage_clean_up(connect_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_connect_storage_clean_up(struct aws_mqtt5_packet_connect_storage *connect_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connect_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connect_storage_init","text":"aws_mqtt5_packet_connect_storage_init(connect_storage, allocator, connect_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_connect_storage_init( struct aws_mqtt5_packet_connect_storage *connect_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_connect_view *connect_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_connect_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_connect_storage_init_from_external_storage","text":"aws_mqtt5_packet_connect_storage_init_from_external_storage(connect_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_connect_storage_init_from_external_storage( struct aws_mqtt5_packet_connect_storage *connect_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_clean_up","text":"aws_mqtt5_packet_disconnect_storage_clean_up(disconnect_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_disconnect_storage_clean_up( struct aws_mqtt5_packet_disconnect_storage *disconnect_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_init","text":"aws_mqtt5_packet_disconnect_storage_init(disconnect_storage, allocator, disconnect_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_disconnect_storage_init( struct aws_mqtt5_packet_disconnect_storage *disconnect_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_disconnect_view *disconnect_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_disconnect_storage_init_from_external_storage","text":"aws_mqtt5_packet_disconnect_storage_init_from_external_storage(disconnect_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_disconnect_storage_init_from_external_storage( struct aws_mqtt5_packet_disconnect_storage *disconnect_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_puback_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_puback_storage_clean_up","text":"aws_mqtt5_packet_puback_storage_clean_up(puback_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_puback_storage_clean_up(struct aws_mqtt5_packet_puback_storage *puback_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_puback_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_puback_storage_init","text":"aws_mqtt5_packet_puback_storage_init(puback_storage, allocator, puback_view)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_puback_storage_init( struct aws_mqtt5_packet_puback_storage *puback_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_puback_view *puback_view);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_puback_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_puback_storage_init_from_external_storage","text":"aws_mqtt5_packet_puback_storage_init_from_external_storage(puback_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_puback_storage_init_from_external_storage( struct aws_mqtt5_packet_puback_storage *puback_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_publish_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_publish_storage_clean_up","text":"aws_mqtt5_packet_publish_storage_clean_up(publish_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_publish_storage_clean_up(struct aws_mqtt5_packet_publish_storage *publish_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_publish_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_publish_storage_init","text":"aws_mqtt5_packet_publish_storage_init(publish_storage, allocator, publish_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_publish_storage_init( struct aws_mqtt5_packet_publish_storage *publish_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_publish_view *publish_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_publish_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_publish_storage_init_from_external_storage","text":"aws_mqtt5_packet_publish_storage_init_from_external_storage(publish_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_publish_storage_init_from_external_storage( struct aws_mqtt5_packet_publish_storage *publish_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_suback_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_suback_storage_clean_up","text":"aws_mqtt5_packet_suback_storage_clean_up(suback_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_suback_storage_clean_up(struct aws_mqtt5_packet_suback_storage *suback_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_suback_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_suback_storage_init","text":"aws_mqtt5_packet_suback_storage_init(suback_storage, allocator, suback_view)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_suback_storage_init( struct aws_mqtt5_packet_suback_storage *suback_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_suback_view *suback_view);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_suback_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_suback_storage_init_from_external_storage","text":"aws_mqtt5_packet_suback_storage_init_from_external_storage(suback_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_suback_storage_init_from_external_storage( struct aws_mqtt5_packet_suback_storage *suback_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_clean_up","text":"aws_mqtt5_packet_subscribe_storage_clean_up(subscribe_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_subscribe_storage_clean_up( struct aws_mqtt5_packet_subscribe_storage *subscribe_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_init","text":"aws_mqtt5_packet_subscribe_storage_init(subscribe_storage, allocator, subscribe_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_subscribe_storage_init( struct aws_mqtt5_packet_subscribe_storage *subscribe_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_subscribe_view *subscribe_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_subscribe_storage_init_from_external_storage","text":"aws_mqtt5_packet_subscribe_storage_init_from_external_storage(subscribe_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_subscribe_storage_init_from_external_storage( struct aws_mqtt5_packet_subscribe_storage *subscribe_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_clean_up","text":"aws_mqtt5_packet_unsuback_storage_clean_up(unsuback_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_unsuback_storage_clean_up( struct aws_mqtt5_packet_unsuback_storage *unsuback_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_init","text":"aws_mqtt5_packet_unsuback_storage_init(unsuback_storage, allocator, unsuback_view)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_unsuback_storage_init( struct aws_mqtt5_packet_unsuback_storage *unsuback_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_unsuback_view *unsuback_view);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsuback_storage_init_from_external_storage","text":"aws_mqtt5_packet_unsuback_storage_init_from_external_storage(unsuback_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_unsuback_storage_init_from_external_storage( struct aws_mqtt5_packet_unsuback_storage *unsuback_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_clean_up","text":"aws_mqtt5_packet_unsubscribe_storage_clean_up(unsubscribe_storage)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_packet_unsubscribe_storage_clean_up( struct aws_mqtt5_packet_unsubscribe_storage *unsubscribe_storage);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_init-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_init","text":"aws_mqtt5_packet_unsubscribe_storage_init(unsubscribe_storage, allocator, unsubscribe_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_unsubscribe_storage_init( struct aws_mqtt5_packet_unsubscribe_storage *unsubscribe_storage, struct aws_allocator *allocator, const struct aws_mqtt5_packet_unsubscribe_view *unsubscribe_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_init_from_external_storage-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_packet_unsubscribe_storage_init_from_external_storage","text":"aws_mqtt5_packet_unsubscribe_storage_init_from_external_storage(unsubscribe_storage, allocator)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_packet_unsubscribe_storage_init_from_external_storage( struct aws_mqtt5_packet_unsubscribe_storage *unsubscribe_storage, struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_user_property_set_clean_up-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_user_property_set_clean_up","text":"aws_mqtt5_user_property_set_clean_up(property_set)\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt5_user_property_set_clean_up(struct aws_mqtt5_user_property_set *property_set);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_user_property_set_init_with_storage-NTuple{5, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_user_property_set_init_with_storage","text":"aws_mqtt5_user_property_set_init_with_storage(property_set, allocator, storage_buffer, property_count, properties)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt5_user_property_set_init_with_storage( struct aws_mqtt5_user_property_set *property_set, struct aws_allocator *allocator, struct aws_byte_buf *storage_buffer, size_t property_count, const struct aws_mqtt5_user_property *properties);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt5_user_property_set_size-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt5_user_property_set_size","text":"aws_mqtt5_user_property_set_size(property_set)\n\nDocumentation not found.\n\nPrototype\n\nsize_t aws_mqtt5_user_property_set_size(const struct aws_mqtt5_user_property_set *property_set);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_acquire","text":"aws_mqtt_client_acquire(client)\n\nIncrements the ref count to an mqtt client, allowing the caller to take a reference to it\n\nArguments\n\nclient:[in] The client to increment the ref count on\n\nReturns\n\nthe mqtt client\n\nPrototype\n\nstruct aws_mqtt_client *aws_mqtt_client_acquire(struct aws_mqtt_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_acquire","text":"aws_mqtt_client_connection_acquire(connection)\n\nIncrements the ref count to an mqtt client connection, allowing the caller to take a reference to it\n\nArguments\n\nconnection:[in] The connection object\n\nReturns\n\nthe mqtt connection\n\nPrototype\n\nstruct aws_mqtt_client_connection *aws_mqtt_client_connection_acquire(struct aws_mqtt_client_connection *connection);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_connect-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_connect","text":"aws_mqtt_client_connection_connect(connection, connection_options)\n\nOpens the actual connection defined by aws_mqtt_client_connection_new. Once the connection is opened, on_connack will be called. Only called when connection is disconnected.\n\nArguments\n\nconnection:[in] The connection object\nconnection_options:[in] Configuration information for the connection attempt\n\nReturns\n\nAWS_OP_SUCCESS if the connection has been successfully initiated, otherwise AWS_OP_ERR and aws_last_error() will be set.\n\nPrototype\n\nint aws_mqtt_client_connection_connect( struct aws_mqtt_client_connection *connection, const struct aws_mqtt_connection_options *connection_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_disconnect-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_disconnect","text":"aws_mqtt_client_connection_disconnect(connection, on_disconnect, userdata)\n\nCloses the connection asynchronously, calls the on_disconnect callback. All uncompleted requests (publish/subscribe/unsubscribe) will be cancelled, regardless to the status of clean_session. DISCONNECT packet will be sent, which deletes the will message from server.\n\nArguments\n\nconnection:[in] The connection to close\non_disconnect:[in] (nullable) Callback function to invoke when the connection is completely disconnected.\nuserdata:[in] (nullable) passed to on_disconnect\n\nReturns\n\nAWS_OP_SUCCESS if the connection is open and is being shutdown, otherwise AWS_OP_ERR and aws_last_error() is set.\n\nPrototype\n\nint aws_mqtt_client_connection_disconnect( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_disconnect_fn *on_disconnect, void *userdata);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_get_stats-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_get_stats","text":"aws_mqtt_client_connection_get_stats(connection, stats)\n\nQueries the connection's internal statistics for incomplete/unacked operations.\n\nArguments\n\nconnection: connection to get statistics for\nstats: set of incomplete/unacked operation statistics\n\nReturns\n\nAWS_OP_SUCCESS if getting the operation statistics were successful, AWS_OP_ERR otherwise\n\nPrototype\n\nint aws_mqtt_client_connection_get_stats( struct aws_mqtt_client_connection *connection, struct aws_mqtt_connection_operation_statistics *stats);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_new-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_new","text":"aws_mqtt_client_connection_new(client)\n\nSpawns a new connection object.\n\nArguments\n\nclient:[in] The client to spawn the connection from\n\nReturns\n\na new mqtt connection on success, NULL otherwise\n\nPrototype\n\nstruct aws_mqtt_client_connection *aws_mqtt_client_connection_new(struct aws_mqtt_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_new_from_mqtt5_client-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_new_from_mqtt5_client","text":"aws_mqtt_client_connection_new_from_mqtt5_client(client)\n\nCreates a new MQTT311 connection object that uses an MQTT5 client under the hood\n\nArguments\n\nclient:[in] The mqtt5 client to create the connection from\n\nReturns\n\na new mqtt (311) connection on success, NULL otherwise\n\nPrototype\n\nstruct aws_mqtt_client_connection *aws_mqtt_client_connection_new_from_mqtt5_client(struct aws_mqtt5_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_publish-NTuple{7, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_publish","text":"aws_mqtt_client_connection_publish(connection, topic, qos, retain, payload, on_complete, userdata)\n\nSend a PUBLISH packet over connection.\n\nArguments\n\nconnection:[in] The connection to publish on\ntopic:[in] The topic to publish on\nqos:[in] The requested QoS of the packet\nretain:[in] True to have the server save the packet, and send to all new subscriptions matching topic\npayload:[in] The data to send as the payload of the publish\non_complete:[in] (nullable) For QoS 0, called as soon as the packet is sent For QoS 1, called when PUBACK is received For QoS 2, called when PUBCOMP is received\nuser_data:[in] (nullable) Passed to on_complete\n\nReturns\n\nThe packet id of the publish packet if successfully sent, otherwise 0.\n\nPrototype\n\nuint16_t aws_mqtt_client_connection_publish( struct aws_mqtt_client_connection *connection, const struct aws_byte_cursor *topic, enum aws_mqtt_qos qos, bool retain, const struct aws_byte_cursor *payload, aws_mqtt_op_complete_fn *on_complete, void *userdata);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_reconnect-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_reconnect","text":"aws_mqtt_client_connection_reconnect(connection, on_connection_complete, userdata)\n\nDEPRECATED Opens the actual connection defined by aws_mqtt_client_connection_new. Once the connection is opened, on_connack will be called.\n\nMust be called on a connection that has previously been open, as the parameters passed during the last connection will be reused.\n\nArguments\n\nconnection:[in] The connection object\non_connection_complete:[in] The callback to fire when the connection attempt completes\nuserdata:[in] (nullable) Passed to the userdata param of on_connection_complete\n\nReturns\n\nAWS_OP_SUCCESS if the connection has been successfully initiated, otherwise AWS_OP_ERR and aws_last_error() will be set.\n\nPrototype\n\nint aws_mqtt_client_connection_reconnect( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_connection_complete_fn *on_connection_complete, void *userdata);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_release","text":"aws_mqtt_client_connection_release(connection)\n\nDecrements the ref count on an mqtt connection. If the ref count drops to zero, the connection is cleaned up. Note: cannot call this with lock held, since it will start the destroy process and cause a dead lock.\n\nArguments\n\nconnection:[in] The connection object\n\nPrototype\n\nvoid aws_mqtt_client_connection_release(struct aws_mqtt_client_connection *connection);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_connection_closed_handler-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_connection_closed_handler","text":"aws_mqtt_client_connection_set_connection_closed_handler(connection, on_closed, on_closed_ud)\n\nSets the callback to call when the connection is closed normally by user request. This is different than the connection interrupted or lost, this only covers successful closure.\n\nArguments\n\nconnection:[in] The connection object\non_closed:[in] The function to call when a connection is closed\non_closed_ud:[in] Userdata for on_closed\n\nPrototype\n\nint aws_mqtt_client_connection_set_connection_closed_handler( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_connection_closed_fn *on_closed, void *on_closed_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_connection_interruption_handlers-NTuple{5, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_connection_interruption_handlers","text":"aws_mqtt_client_connection_set_connection_interruption_handlers(connection, on_interrupted, on_interrupted_ud, on_resumed, on_resumed_ud)\n\nSets the callbacks to call when a connection is interrupted and resumed.\n\nArguments\n\nconnection:[in] The connection object\non_interrupted:[in] The function to call when a connection is lost\non_interrupted_ud:[in] Userdata for on_interrupted\non_resumed:[in] The function to call when a connection is resumed (if clean_session is true, calling aws_mqtt_resubscribe_existing_topics is suggested)\non_resumed_ud:[in] Userdata for on_resumed\n\nPrototype\n\nint aws_mqtt_client_connection_set_connection_interruption_handlers( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_connection_interrupted_fn *on_interrupted, void *on_interrupted_ud, aws_mqtt_client_on_connection_resumed_fn *on_resumed, void *on_resumed_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_connection_result_handlers-NTuple{5, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_connection_result_handlers","text":"aws_mqtt_client_connection_set_connection_result_handlers(connection, on_connection_success, on_connection_success_ud, on_connection_failure, on_connection_failure_ud)\n\nSets the callbacks to call when a connection succeeds or fails\n\nArguments\n\nconnection:[in] The connection object\non_connection_success:[in] The function to call when a connection is successful or gets resumed\non_connection_success_ud:[in] Userdata for on_connection_success\non_connection_failure:[in] The function to call when a connection fails\non_connection_failure_ud:[in] Userdata for on_connection_failure\n\nPrototype\n\nint aws_mqtt_client_connection_set_connection_result_handlers( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_connection_success_fn *on_connection_success, void *on_connection_success_ud, aws_mqtt_client_on_connection_failure_fn *on_connection_failure, void *on_connection_failure_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_connection_termination_handler-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_connection_termination_handler","text":"aws_mqtt_client_connection_set_connection_termination_handler(connection, on_termination, on_termination_ud)\n\nSets the callback to call on a connection destruction.\n\nArguments\n\nconnection:[in] The connection object.\non_termination:[in] The function to call when a connection is destroyed.\non_termination_ud:[in] Userdata for on_termination.\n\nPrototype\n\nint aws_mqtt_client_connection_set_connection_termination_handler( struct aws_mqtt_client_connection *connection, aws_mqtt_client_on_connection_termination_fn *on_termination, void *on_termination_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_host_resolution_options-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_host_resolution_options","text":"aws_mqtt_client_connection_set_host_resolution_options(connection, host_resolution_config)\n\nSet host resolution ooptions for the connection.\n\nPrototype\n\nint aws_mqtt_client_connection_set_host_resolution_options( struct aws_mqtt_client_connection *connection, const struct aws_host_resolution_config *host_resolution_config);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_http_proxy_options-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_http_proxy_options","text":"aws_mqtt_client_connection_set_http_proxy_options(connection, proxy_options)\n\nSet http proxy options for the connection.\n\nPrototype\n\nint aws_mqtt_client_connection_set_http_proxy_options( struct aws_mqtt_client_connection *connection, struct aws_http_proxy_options *proxy_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_login-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_login","text":"aws_mqtt_client_connection_set_login(connection, username, password)\n\nSets the username and/or password to send with the CONNECT packet.\n\nArguments\n\nconnection:[in] The connection object\nusername:[in] The username to connect with\npassword:[in] [optional] The password to connect with\n\nPrototype\n\nint aws_mqtt_client_connection_set_login( struct aws_mqtt_client_connection *connection, const struct aws_byte_cursor *username, const struct aws_byte_cursor *password);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_on_any_publish_handler-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_on_any_publish_handler","text":"aws_mqtt_client_connection_set_on_any_publish_handler(connection, on_any_publish, on_any_publish_ud)\n\nSets the callback to call whenever ANY publish packet is received. Only safe to set when connection is not connected.\n\nArguments\n\nconnection:[in] The connection object\non_any_publish:[in] The function to call when a publish is received (pass NULL to unset)\non_any_publish_ud:[in] Userdata for on_any_publish\n\nPrototype\n\nint aws_mqtt_client_connection_set_on_any_publish_handler( struct aws_mqtt_client_connection *connection, aws_mqtt_client_publish_received_fn *on_any_publish, void *on_any_publish_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_reconnect_timeout-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_reconnect_timeout","text":"aws_mqtt_client_connection_set_reconnect_timeout(connection, min_timeout, max_timeout)\n\nSets the minimum and maximum reconnect timeouts.\n\nThe time between reconnect attempts will start at min and multiply by 2 until max is reached.\n\nArguments\n\nconnection:[in] The connection object\nmin_timeout:[in] The timeout to start with\nmax_timeout:[in] The highest allowable wait time between reconnect attempts\n\nPrototype\n\nint aws_mqtt_client_connection_set_reconnect_timeout( struct aws_mqtt_client_connection *connection, uint64_t min_timeout, uint64_t max_timeout);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_set_will-NTuple{5, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_set_will","text":"aws_mqtt_client_connection_set_will(connection, topic, qos, retain, payload)\n\nSets the will message to send with the CONNECT packet.\n\nArguments\n\nconnection:[in] The connection object\ntopic:[in] The topic to publish the will on\nqos:[in] The QoS to publish the will with\nretain:[in] The retain flag to publish the will with\npayload:[in] The data if the will message\n\nPrototype\n\nint aws_mqtt_client_connection_set_will( struct aws_mqtt_client_connection *connection, const struct aws_byte_cursor *topic, enum aws_mqtt_qos qos, bool retain, const struct aws_byte_cursor *payload);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_subscribe-NTuple{8, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_subscribe","text":"aws_mqtt_client_connection_subscribe(connection, topic_filter, qos, on_publish, on_publish_ud, on_ud_cleanup, on_suback, on_suback_ud)\n\nSubscribe to a single topic filter. on_publish will be called when a PUBLISH matching topic_filter is received.\n\nArguments\n\nconnection:[in] The connection to subscribe on\ntopic_filter:[in] The topic filter to subscribe on. This resource must persist until on_suback.\nqos:[in] The maximum QoS of messages to receive\non_publish:[in] (nullable) Called when a PUBLISH packet matching topic_filter is received\non_publish_ud:[in] (nullable) Passed to on_publish\non_ud_cleanup:[in] (nullable) Called when a subscription is removed, on_publish_ud is passed.\non_suback:[in] (nullable) Called when a SUBACK has been received from the server and the subscription is complete\non_suback_ud:[in] (nullable) Passed to on_suback\n\nReturns\n\nThe packet id of the subscribe packet if successfully sent, otherwise 0.\n\nPrototype\n\nuint16_t aws_mqtt_client_connection_subscribe( struct aws_mqtt_client_connection *connection, const struct aws_byte_cursor *topic_filter, enum aws_mqtt_qos qos, aws_mqtt_client_publish_received_fn *on_publish, void *on_publish_ud, aws_mqtt_userdata_cleanup_fn *on_ud_cleanup, aws_mqtt_suback_fn *on_suback, void *on_suback_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_subscribe_multiple-NTuple{4, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_subscribe_multiple","text":"aws_mqtt_client_connection_subscribe_multiple(connection, topic_filters, on_suback, on_suback_ud)\n\nSubscribe to topic filters. on_publish will be called when a PUBLISH matching each topic_filter is received.\n\nArguments\n\nconnection:[in] The connection to subscribe on\ntopic_filters:[in] An array_list of aws_mqtt_topic_subscription (NOT pointers) describing the requests.\non_suback:[in] (nullable) Called when a SUBACK has been received from the server and the subscription is complete. Broker may fail one of the topics, check the qos in aws_mqtt_topic_subscription from the callback\non_suback_ud:[in] (nullable) Passed to on_suback\n\nReturns\n\nThe packet id of the subscribe packet if successfully sent, otherwise 0.\n\nPrototype\n\nuint16_t aws_mqtt_client_connection_subscribe_multiple( struct aws_mqtt_client_connection *connection, const struct aws_array_list *topic_filters, aws_mqtt_suback_multi_fn *on_suback, void *on_suback_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_unsubscribe-NTuple{4, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_unsubscribe","text":"aws_mqtt_client_connection_unsubscribe(connection, topic_filter, on_unsuback, on_unsuback_ud)\n\nUnsubscribe to a topic filter.\n\nArguments\n\nconnection:[in] The connection to unsubscribe on\ntopic_filter:[in] The topic filter to unsubscribe on. This resource must persist until on_unsuback.\non_unsuback:[in] (nullable) Called when a UNSUBACK has been received from the server and the subscription is removed\non_unsuback_ud:[in] (nullable) Passed to on_unsuback\n\nReturns\n\nThe packet id of the unsubscribe packet if successfully sent, otherwise 0.\n\nPrototype\n\nuint16_t aws_mqtt_client_connection_unsubscribe( struct aws_mqtt_client_connection *connection, const struct aws_byte_cursor *topic_filter, aws_mqtt_op_complete_fn *on_unsuback, void *on_unsuback_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_connection_use_websockets-NTuple{5, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_connection_use_websockets","text":"aws_mqtt_client_connection_use_websockets(connection, transformer, transformer_ud, validator, validator_ud)\n\nUse MQTT over websockets when connecting. Requires the MQTT_WITH_WEBSOCKETS build option.\n\nIn this scenario, an HTTP connection is established, which is then upgraded to a websocket connection, which is then used to send MQTT data.\n\nArguments\n\nconnection:[in] The connection object.\ntransformer:[in] [optional] Function that may transform the websocket handshake request. See aws_mqtt_transform_websocket_handshake_fn for more info.\ntransformer_ud:[in] [optional] Userdata for request_transformer.\nvalidator:[in] [optional] Function that may reject the websocket handshake response.\nvalidator_ud:[in] [optional] Userdata for response_validator.\n\nPrototype\n\nint aws_mqtt_client_connection_use_websockets( struct aws_mqtt_client_connection *connection, aws_mqtt_transform_websocket_handshake_fn *transformer, void *transformer_ud, aws_mqtt_validate_websocket_handshake_fn *validator, void *validator_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_get_payload_for_outstanding_publish_packet-NTuple{4, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_get_payload_for_outstanding_publish_packet","text":"aws_mqtt_client_get_payload_for_outstanding_publish_packet(connection, packet_id, allocator, result)\n\nresult buffer will be initialized and payload will be written into it\n\nPrototype\n\nint aws_mqtt_client_get_payload_for_outstanding_publish_packet( struct aws_mqtt_client_connection *connection, uint16_t packet_id, struct aws_allocator *allocator, struct aws_byte_buf *result);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_get_topic_for_outstanding_publish_packet-NTuple{4, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_get_topic_for_outstanding_publish_packet","text":"aws_mqtt_client_get_topic_for_outstanding_publish_packet(connection, packet_id, allocator, result)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt_client_get_topic_for_outstanding_publish_packet( struct aws_mqtt_client_connection *connection, uint16_t packet_id, struct aws_allocator *allocator, struct aws_string **result);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_new-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_new","text":"aws_mqtt_client_new(allocator, bootstrap)\n\nCreates an instance of aws_mqtt_client.\n\nArguments\n\nallocator:[in] The allocator the client will use for all future allocations\nbootstrap:[in] The client bootstrap to use to initiate new socket connections\n\nReturns\n\na new instance of an aws_mqtt_client if successful, NULL otherwise\n\nPrototype\n\nstruct aws_mqtt_client *aws_mqtt_client_new(struct aws_allocator *allocator, struct aws_client_bootstrap *bootstrap);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_client_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_client_release","text":"aws_mqtt_client_release(client)\n\nDecrements the ref count on an mqtt client. If the ref count drops to zero, the client is cleaned up.\n\nArguments\n\nclient:[in] The client to release a ref count on\n\nPrototype\n\nvoid aws_mqtt_client_release(struct aws_mqtt_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_fatal_assert_library_initialized-Tuple{}","page":"Home","title":"LibAwsMqtt.aws_mqtt_fatal_assert_library_initialized","text":"aws_mqtt_fatal_assert_library_initialized()\n\nDocumentation not found.\n\nPrototype\n\nvoid aws_mqtt_fatal_assert_library_initialized(void);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_is_valid_topic-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_is_valid_topic","text":"aws_mqtt_is_valid_topic(topic)\n\nDocumentation not found.\n\nPrototype\n\nbool aws_mqtt_is_valid_topic(const struct aws_byte_cursor *topic);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_is_valid_topic_filter-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_is_valid_topic_filter","text":"aws_mqtt_is_valid_topic_filter(topic_filter)\n\nDocumentation not found.\n\nPrototype\n\nbool aws_mqtt_is_valid_topic_filter(const struct aws_byte_cursor *topic_filter);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_library_clean_up-Tuple{}","page":"Home","title":"LibAwsMqtt.aws_mqtt_library_clean_up","text":"aws_mqtt_library_clean_up()\n\nShuts down the internal datastructures used by aws-c-mqtt.\n\nPrototype\n\nvoid aws_mqtt_library_clean_up(void);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_library_init-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_library_init","text":"aws_mqtt_library_init(allocator)\n\nInitializes internal datastructures used by aws-c-mqtt. Must be called before using any functionality in aws-c-mqtt.\n\nPrototype\n\nvoid aws_mqtt_library_init(struct aws_allocator *allocator);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_acquire","text":"aws_mqtt_request_response_client_acquire(client)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_request_response_client *aws_mqtt_request_response_client_acquire( struct aws_mqtt_request_response_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_create_streaming_operation-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_create_streaming_operation","text":"aws_mqtt_request_response_client_create_streaming_operation(client, streaming_options)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_rr_client_operation *aws_mqtt_request_response_client_create_streaming_operation( struct aws_mqtt_request_response_client *client, const struct aws_mqtt_streaming_operation_options *streaming_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_get_event_loop-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_get_event_loop","text":"aws_mqtt_request_response_client_get_event_loop(client)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_event_loop *aws_mqtt_request_response_client_get_event_loop( struct aws_mqtt_request_response_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_new_from_mqtt311_client-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_new_from_mqtt311_client","text":"aws_mqtt_request_response_client_new_from_mqtt311_client(allocator, client, options)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_request_response_client *aws_mqtt_request_response_client_new_from_mqtt311_client( struct aws_allocator *allocator, struct aws_mqtt_client_connection *client, const struct aws_mqtt_request_response_client_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_new_from_mqtt5_client-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_new_from_mqtt5_client","text":"aws_mqtt_request_response_client_new_from_mqtt5_client(allocator, client, options)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_request_response_client *aws_mqtt_request_response_client_new_from_mqtt5_client( struct aws_allocator *allocator, struct aws_mqtt5_client *client, const struct aws_mqtt_request_response_client_options *options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_release","text":"aws_mqtt_request_response_client_release(client)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_request_response_client *aws_mqtt_request_response_client_release( struct aws_mqtt_request_response_client *client);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_request_response_client_submit_request-Tuple{Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_request_response_client_submit_request","text":"aws_mqtt_request_response_client_submit_request(client, request_options)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt_request_response_client_submit_request( struct aws_mqtt_request_response_client *client, const struct aws_mqtt_request_operation_options *request_options);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_resubscribe_existing_topics-Tuple{Any, Any, Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_resubscribe_existing_topics","text":"aws_mqtt_resubscribe_existing_topics(connection, on_suback, on_suback_ud)\n\nResubscribe to all topics currently subscribed to. This is to help when resuming a connection with a clean session.\n\nArguments\n\nconnection:[in] The connection to subscribe on\non_suback:[in] (nullable) Called when a SUBACK has been received from the server and the subscription is complete\non_suback_ud:[in] (nullable) Passed to on_suback\n\nReturns\n\nThe packet id of the subscribe packet if successfully sent, otherwise 0 (and aws_last_error() will be set).\n\nPrototype\n\nuint16_t aws_mqtt_resubscribe_existing_topics( struct aws_mqtt_client_connection *connection, aws_mqtt_suback_multi_fn *on_suback, void *on_suback_ud);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_rr_client_operation_acquire-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_rr_client_operation_acquire","text":"aws_mqtt_rr_client_operation_acquire(operation)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_rr_client_operation *aws_mqtt_rr_client_operation_acquire( struct aws_mqtt_rr_client_operation *operation);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_rr_client_operation_activate-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_rr_client_operation_activate","text":"aws_mqtt_rr_client_operation_activate(operation)\n\nDocumentation not found.\n\nPrototype\n\nint aws_mqtt_rr_client_operation_activate(struct aws_mqtt_rr_client_operation *operation);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_rr_client_operation_release-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_rr_client_operation_release","text":"aws_mqtt_rr_client_operation_release(operation)\n\nDocumentation not found.\n\nPrototype\n\nstruct aws_mqtt_rr_client_operation *aws_mqtt_rr_client_operation_release( struct aws_mqtt_rr_client_operation *operation);\n\n\n\n\n\n","category":"method"},{"location":"#LibAwsMqtt.aws_mqtt_validate_utf8_text-Tuple{Any}","page":"Home","title":"LibAwsMqtt.aws_mqtt_validate_utf8_text","text":"aws_mqtt_validate_utf8_text(text)\n\nValidate utf-8 string under mqtt specs\n\nArguments\n\ntext:\n\nReturns\n\nAWS_OP_SUCCESS if the text is validate, otherwise AWS_OP_ERR\n\nPrototype\n\nint aws_mqtt_validate_utf8_text(struct aws_byte_cursor text);\n\n\n\n\n\n","category":"method"}]
}
